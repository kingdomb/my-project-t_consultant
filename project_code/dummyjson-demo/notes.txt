Here’s a comprehensive, step-by-step guide to implementing i18n (internationalization) in your Expo-managed React Native project, based on our full journey — including every change, fix, and upgrade we made.

✅ Final Setup: Goals
Expo Managed app

Support 4 languages: English (en), French (fr), Spanish (es), German (de)

Dynamically detect language based on device or browser

Show localized static text (e.g., “Motorcycle”, “House”, etc.)

Compatible across mobile (Expo Go) and web

🧱 1. Install Required Packages
bash
Copy
Edit
npx expo install expo-localization
npm install i18next react-i18next
We originally tried react-native-localize, but replaced it with expo-localization due to native module issues in Expo Go (e.g., TurboModuleRegistry error).

🗂️ 2. Create Your Project Structure
Inside your src/ folder:

pgsql
Copy
Edit
src/
├── i18n/
│   ├── config.ts
│   └── locales/
│       ├── en.json
│       ├── fr.json
│       ├── es.json
│       └── de.json
🌍 3. Add Translation Files
src/i18n/locales/en.json
json
Copy
Edit
{
  "header": "For Sale",
  "motorcycle": "Motorcycle",
  "car": "Car",
  "house": "House"
}
Repeat for fr.json, es.json, and de.json with proper translations.

🧠 4. Configure i18n/config.ts
src/i18n/config.ts
ts
Copy
Edit
import i18n from 'i18next';
import * as Localization from 'expo-localization';
import { initReactI18next } from 'react-i18next';

import en from './locales/en.json';
import fr from './locales/fr.json';
import es from './locales/es.json';
import de from './locales/de.json';

const resources = {
  en: { translation: en },
  fr: { translation: fr },
  es: { translation: es },
  de: { translation: de },
};

const fallbackLng = 'en';

const isWeb = typeof navigator !== 'undefined';

const deviceLanguage = isWeb
  ? navigator.language
  : Localization.getLocales()[0]?.languageTag || fallbackLng;

i18n
  .use(initReactI18next)
  .init({
    compatibilityJSON: 'v3',
    resources,
    lng: deviceLanguage,
    fallbackLng,
    interpolation: {
      escapeValue: false,
    },
  });

export default i18n;
📌 Note: We changed the language detection logic to fix inconsistencies on web.
navigator.languages sometimes returns unexpected results — so we used navigator.language instead.

🧼 5. Fix Path Resolution (Optional)
To use @/i18n/config, we configured a Babel alias.

Install the package:

bash
Copy
Edit
npm install --save-dev babel-plugin-module-resolver
Update your babel.config.js:

js
Copy
Edit
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      ['module-resolver', {
        alias: {
          '@': './src',
        },
      }],
    ],
  };
};
This fixes: Unable to resolve path to module '@/i18n/config'

🧪 6. Use Translations in Code
At the top of your screen file:
ts
Copy
Edit
import '../../i18n/config'; // Initialize i18n
import { useTranslation } from 'react-i18next';
In your component:
ts
Copy
Edit
const { t } = useTranslation();

return (
  <View>
    <Text>{t('header')}</Text>
    <Text>{t('motorcycle')}</Text>
    <Text>{t('car')}</Text>
    <Text>{t('house')}</Text>
  </View>
);
📱 7. Test Language Detection
On iOS/Android Expo Go, the language is picked up from device settings.

On web, we fixed issues by restarting Chrome and checking navigator.language.

You can log it:

ts
Copy
Edit
console.log('i18n language:', i18n.language);
🧪 Optional: Manual Language Switching
Add this anywhere in your app:

ts
Copy
Edit
i18n.changeLanguage('fr'); // or 'es', 'de', etc.
This is useful for testing.

✅ Summary: Key Fixes & Changes We Made
Issue	Fix
react-native-localize caused native error	Switched to expo-localization
Web didn't detect language properly	Used navigator.language instead of navigator.languages[0]
ESLint import errors with @/ alias	Installed babel-plugin-module-resolver
Module resolution failed after import	Verified correct path and Babel alias

Let me know if you want to add language switching UI, RTL support, or save the language in storage (e.g., AsyncStorage).